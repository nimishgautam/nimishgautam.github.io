[
  
  {
    "title": "Getting an oldschool tablet PC (Toshiba Portege M200) working in 2022",
    "url": "/posts/portege200/",
    "categories": "Hardware",
    "tags": "hardware, tinkering",
    "date": "2022-09-14 00:00:00 +0200",
    





    "snippet": "Disclaimer: The useful part of this post is just a rehash of this amazing resource which got my hardware working. I‚Äôm writing this mostly in case this page and knowledge vanish from the internetMeet the Tablet before TabletsMany years decades(!) ago I bought a laptop for the purpose of taking handwritten notes in meetings. This was the Toshiba Portege/Port√©g√© M200, which first came out in 2004.It was a tablet at the time (called Tablet PC‚Äôs now), meaning it was a laptop that also accepted stylus input. This one was unique in that you could twist the screen around so you‚Äôd have a thick writing surface and what looked like only a screen with a few buttons on it at the bottom, a very strange look for the time.It was cool, but was a bit impractical for me. Turns out I held meetings better on paper (still do) but it was a cool novelty I never could bring myself to part with.I dug it up again recently along with an SSD I had lying around and figured I was good to go. After all, 9 times out of 10 just adding an SSD to an old HDD-based laptop is all you need for it to feel modern. I was wrong. This is a list of things I tried to upgrade it, followed by the one thing that worked (skip here if you don‚Äôt want the whole story).Strange Commercial Decisions in the Toshiba BIOSSo, first step is to download the latest Ubuntu and copy a bootable ISO onto a USB, right?Well, here are the boot menu options in the BIOS                                                                                      :  Hard Disk  Floppy Disk  CD-ROM  Network  External laptop PCI cardYou‚Äôll note a distinct lack of USB option here. Also, the laptop itself doesn‚Äôt have a floppy disk drive or CD-ROM drive built-in, and the Toshiba BIOS only recognizes Toshiba-branded floppy disk and CD-ROM drives. I liked this thing, but I didn‚Äôt want to search eBay for some random accessory just for booting.That left little choice and lots of creativity.Network: PXE boot attemptThe natural first choice was doing a network boot.This set-up makes sense if you‚Äôre, say, a large company with a dedicated network install server somewhere. But when you just have one computer, you have to improvise a bit.Ingredients  A network server running Linux          also needs an ethernet port      also needs another internet connection that‚Äôs not the first ethernet port        A network switch (or a crossover cable)  2 ethernet cables (or, again, just a single crossover cable)ProcessThe client (the Portege in this case) asks the network for a network address via DHCP and for an address to find a bootable image, which it then transfers using SFTP. So you need a DHCP server and SFTP server running on the server image, along with the bootable client image you‚Äôre looking for.Ubuntu does have this process, albiet sparsely documented, here: Ubuntu Forums NetbootingIt tells you to use dnsmasq, which is a nifty utility for setting up DNS, DHCP, and also SFTP in one.Extra notes before using the Ubuntu guide      You‚Äôll probably have a set up where your server machine is connected to 2 networks, your ‚Äòreal‚Äô network and then your mini-wired network you‚Äôve created to do the netboot. In this case, it‚Äôs a good idea to disable dnsmasq‚Äôs DNS so it doesn‚Äôt collide with your own DNS. You do this by setting port=0.        You need to include the extra conf files to be read (which is not done by default)        You also need to include a netmask value for the dhcp-range to work right        You need to be sure the interface you‚Äôre using is set to a static IP address, and that IP address is within the range you specify in the dhcp-range command        I found it was easier to hardcode the IP address I wanted the client to have based on its MAC address. You can do that with the dhcp-host setting  Summary:Change the following in /etc/dnsmasq.conf:# include all files in a directory which end in .confconf-dir=/etc/dnsmasq.d/,*.confAfter following the Ubuntu guide, change the following in /etc/dnsmasq.d/pxe.conf:# disable DNSport=0dhcp-range=&lt;interface-name&gt;, 192.168.0.1, 192.168.0.200, 255.255.255.0dhcp-host=&lt;host-MAC&gt;, 192.168.0.10Where &lt;interface-name&gt; is something like eth0. (If you‚Äôre not sure you can run ifconfig and find out what the interface is called). &lt;host-MAC&gt; is in plain hex format, so something like 00:de:ad:be:ef:00 except with your device‚Äôs MAC addressStatus                        build                                      Failed              üò¢Why did it fail? Well, I couldn‚Äôt actually get the SFTP server to send pxelinux.0 file over. I kept getting errors saying the file wasn‚Äôt transferred. I‚Äôm not sure if the protocols didn‚Äôt match or what, but this was where I got stuck. So I tried a new approachHard Disk: Install Linux using Linux attemptThis seems simple enough. You have a linux machine already, why not just take the hard drive out of the original machine and install linux on the hard drive using a different machine?Ingredients  Linux machine that can take a bootable USB  Bootable USB  USB dongle that lets you attach the Portege internal harddrive to a USB cableProcessThe hardware back then was super-easy to screw and unscrew. I just removed the harddrive and attached it using the dongle.Then, I used an Ubuntu installer and installed Ubuntu on the secondary hard-drive when prompted (instead of the main harddrive).Status                        build                                      Failed              üôéüèºWhy did it fail? Well, it appears Ubuntu is too smart for its own good. Doing this does install Ubuntu on the disk, but it makes some assumptions about your system‚Ä¶ mainly that it‚Äôs living on the system it‚Äôs currently attached to. So if that system uses UEFI, let‚Äôs say, then it will go ahead and use that for booting, irrespective of whatever system it will be moved to later.This process had some promise, but there would be no way to do it without doing some major re-tweaking of the OS after it was installed.Hard Disk: Sneaky ISO attemptOk, so what if I use the detached external hard-disk itself as the install mechanism?Ingredients:  Machine that can write a bootable ISO  USB dongle that lets you attach the Portege internal harddrive to a USB cableProcessI tried partitioning the harddrive into several partitions, so I can write the bootable ISO into one partition and install the OS into another partition.Status                        build                                      Failed              ü§¨Why did it fail? Well, apparently an ISO file isn‚Äôt supposed to be writeable to a partition, but should and will take up a whole device.Despite this, it seems that throughout the years, various tools from Gparted to Unetbootin have had versions that, through some quirks, let you do this. However, it looks like unstable behavior and running old software that‚Äôs known to have bugs is usually not a good idea.‚ÄòSecret‚Äô Floppy Disk: The attempt that worked!I was finally giving up, when I came across this amazing post someone had made, outlining his attempts.The rest of this section is more-or-less verbatim repetition of his instructions just so there‚Äôs another copy of them somewhere on the internet.Ingredients  SD card with less than 1 GB storage, formatted as FAT16  Another machine capable of writing to said SD card  Bootable USB with a non-PAE Linux distro on it1ProcessOk, this is quite nuts. Basically, the portege has a SD card reader that the BIOS treats as a very special floppy disk drive. It only works in the BIOS as a bootable device if it has a really exact format.Specifically:  Format the SD card as FAT16, non-bootable  Download PLOP boot manager  Extract and copy pblpbt.img onto the SD card, renaming it $tosfd00.vfd 2Now, stick the SD card into the Portege SD card reader, and press F2 while booting. This will let you select the proper boot icon using the arrow keys. Pick the one that shows an SD card lying on top of a floppy disk drive.You should be looking at the PLOP boot manager. In here, go to Setup &gt; Bootmanager &gt; Force USB 1.1 and then leave with hitting escape.Now, the ISO on the USB drive should boot (again, assuming non-PAE1 ISO)!Status                        build                                      Success              ü§ØIt‚Ä¶ actually worked! It was the most long, drawn-out, painful thing ever, but it finally worked in the end!!I was able to install:  AntiX Linux (meant to sound like ‚Äòantiques‚Äô and not ‚Äòanti-X‚Äô) as a baseline OS  Xournal for notes/drawing  Cell Writer for handwriting input  Florence as an on-screen keyboardThe system (using a SDD and 2GB RAM upgrades) is actually very responsive and 100% usable as a Linux system. Don‚Äôt expect it to do video very well (streaming, calling, etc) but otherwise totally great, and the pressure-sensitive stylus and screen work totally as expected right out of the box!ConclusionSo, there was really not a lot of point doing this. It probably would have been cheaper to get a more modern Tablet PC and tweak that. Also, with the PAE architecture becoming standard, it‚Äôll only be a matter of time before the above is only possible as an art project and won‚Äôt result in a system with a usable distro. Still, though, cool to have a fully-functional modern 2-decade old machine!!Notes            Old Intel CPUs would only be able to address 4 GB, until they were built with an extension (PAE) that let them address more. At some point the Linux kernel made this standard, meaning if you have an older, pre-PAE CPU (like the portege has), you have to have a linux kernel image that does not rely on PAE. Yes, this was news to me too, so my other attempts wouldn‚Äôt‚Äôve worked anyways. A good linux image for this at the time of writing is AntiX Linux¬†&#8617;¬†&#8617;2              I have no idea how the original person who made this post discovered this quirk!!¬†&#8617;      "
  },
  
  {
    "title": "QMK Layer Issues and Troubleshooting",
    "url": "/posts/QMK-tricks/",
    "categories": "Programming",
    "tags": "QMK, Mechanical Keyboards, Programming",
    "date": "2022-09-11 00:00:00 +0200",
    





    "snippet": "OverviewQuantum Mechanical Keyboard (or qmk ) is an amazing software library that lets you program your mechanical keyboard in all sorts of ways.However, I‚Äôve had some ‚Äòminor‚Äô issues in trying to get my keyboard to do exactly what I want, and it took lots of time combing through the documentation to figure out the solutions to my issues. So I made this ‚ÄòLayer Issues and Troubleshooting‚Äô page to document some of my techniques and best-practices to solve some of these problems.Issue: Mod-tap or Layer-tap can‚Äôt send shifted characterLet‚Äôs say you have a dual-function key. On tap, it produces, say, the letter a. On hold, it temporarily applies a new layer. This works as expected with the LT() function. But, if you want it to send a modified character like ( (which is really 9 but with a shift modifier) it can‚Äôt do it. It only works on ‚Äòsimple‚Äô codes.Solution: override the custom key handlingThere‚Äôs a great function called process_record_user that will handle a keypress in a customized way.In this case, you want to add to this function (or create it if it doesn‚Äôt exist) in your keymap.c file.If you wanted a key to produce ( on tap and toggle layer 1 on hold, you would call it LT(1, KC_LPRN) and have a function like this:bool process_record_user(uint16_t keycode, keyrecord_t *record) {  switch (keycode) {    case LT(1,KC_LPRN):        if (record-&gt;tap.count &amp;&amp; record-&gt;event.pressed) { //normally the tap sends nothing, you intercept it here            tap_code16(KC_LPRN);             return false; // stop handling this event        }    break;This means that on tap, this function taps KC_LPRN and then stops processing the key press.Issue: Mod-tap can‚Äôt switch to a layer while applying a modifier to that layerLet‚Äôs say you have a numbers layer, and rather than creating a symbols layer, you just want to press a button that layer-taps you into the numbers but with ‚Äòshift‚Äô held down at the same time.There‚Äôs no default way to do this in QMK. You can switch to a new layer, but you can‚Äôt switch to the layer with a modifier held down simultaniously.Solution: add the mod to the key handlerThis looks similar to the solution above, and you will put this in the same switch statement as above.The critical difference is returning true instead of false so the key press gets processed further.In this case, say you wanted a key to temporarily toggle Layer 1 with the left shift modifier pressed on hold, and produce a comma (,) when tapped:   case LT(1, KC_COMM):        if(record-&gt;event.pressed){ //pressed down            if(!record-&gt;tap.count){ //hasn't had a tap yet, so just being held down                register_mods(MOD_LSFT);                }        }        else{            unregister_mods(MOD_LSFT); // key up        }        return true; // keep processing key!        break;Now, holding this key down and another key will cause the second key to output its shifted version in layer 1.Issue: You want a fully customized behavior on tap and hold of a particular keySay you want a key to copy on tap and paste on hold.Solution: it‚Äôs in the docs üôÇThis solution is actually in the documentation. üôÇSo why bring it up? With the popularity of the Oryx configurator many people will try to use the advanced tap-dance configurations to produce this behavior instead. While it‚Äôs not wrong and will probably work, I‚Äôve found it to be a little difficult to trigger reliably. In general, I‚Äôve found using mod-tap works best and the ‚Äòadvanced‚Äô tap dance configurations should only be used when you need to do something truly advanced.Issue: auto-shift doesn‚Äôt shift ‚Äòcomplex‚Äô key codesAuto-shift lets you (as the name implies) auto-shift keys. So, if you quickly tap ‚Äòs‚Äô, you‚Äôll get ‚Äòs‚Äô. Hold it down a bit longer and you get ‚ÄòS‚Äô. It‚Äôs nifty and works fine if your key is sending KC_S but if your key is actually something like MT(MOD_LALT, KC_S), then it won‚Äôt work and you might bang your head on the table endlessly figuring out why.Solution: define custom autoshift behaviorThis is in the docs, but not totally clear or obvious (as of this writing)First, you have to understand the idea of ‚Äòretro tapping‚Äô.The idea behind this is that if you did have a key like MT(MOD_LALT, KC_S) above, it won‚Äôt ever send a ‚Äòs‚Äô if you hold it down past the tapping term. It‚Äôll send a ‚Äòs‚Äô on quick tap and act like you‚Äôre holding down the Alt key otherwise. If you want to hold it down and get a ‚Äòs‚Äô, you have to enable ‚Äòretro tap‚Äô.In terms of autoshift, basically what you want to happen is that if you hold this key down for some quick amount of time, you get a ‚Äòs‚Äô, some other amount of time and you get a ‚ÄòS‚Äô, and a different amount of time and it assumes you‚Äôre pressing ‚Äòalt‚Äô. There‚Äôs some fine-tuning on the timings to get it right, but in terms of auto-shift world, this behavior makes this key a ‚Äòretro‚Äô key because it requires ‚Äòretro tapping‚Äô to work.The simplest way to get it running is to:      define a RETRO_SHIFT term in your config.h file. Contrary to intuition, this is actually the timeout, after which the given ‚Äòretro‚Äô keys will only produce their hold values, so it‚Äôs a good idea to set it kind of high (like 400)        Create a function like below:  bool get_custom_auto_shifted_key(uint16_t keycode, keyrecord_t *record) {    if (IS_RETRO(keycode)){return true;}    else {      return false;    }}This function will actually allow you to set whether autoshift behavior is defined on a per-key basis. The ‚Äòretro‚Äô keys are outside the standard autoshift ranges, so, again, you will need this if you‚Äôre not sending a simple key code."
  },
  
  {
    "title": "GitHub-hosted Static Pages - is it worth it?",
    "url": "/posts/Github-hosted/",
    "categories": "Blogging",
    "tags": "web development, blogging, software philosophy",
    "date": "2022-09-11 00:00:00 +0200",
    





    "snippet": "Motivation for a github.io pageGithub has a fairly strong positive reputation (as of this writing üôÇ)They also have a feature where they will host a static website for you for free based on the contents of a github repository. By convention, most people use this as a personal blog space, and specifically technical blogs (I think this is a self-selecting mechanism I‚Äôll talk about later). So, using this system, you can have your own site associated with your github account. Nifty.Throughout the years, I‚Äôve had accounts on dozens of blogging platforms, along with setting up my own self-hosted blogs.I‚Äôve never gone with static blog generation in the way that github recommends though, so I thought I‚Äôd give it a whirl.Here are some of the pros and cons I found in that process.Pros‚úÖ Free hosting and infrastructure maintenanceNo hosting costs or subscription costs, big plus. But this extends beyond simple hosting costs and also covers maintenance costs. You don‚Äôt have to update the underlying server, ensure it‚Äôs secure, do any migrations1 or anything. No renewing SSL certificates, renewing domain names, etc. Theoretically, your content will be fine, secure, and accessible for as long as github offers this service.As someone who has unfortunately left Wordpress installations idle for years, I can say this point shouldn‚Äôt be overlooked.‚úÖ Full Content controlYou control the code that‚Äôs deployed in its final form; the platform doesn‚Äôt add advertising banners without you knowing or otherwise break up or reflow your content in ways you didn‚Äôt anticipate.‚úÖ Full presentation controlSimilarly, since the site has been auto-generated already, you can edit the generated HTML files after-the-fact and modify/inject whatever you want, as opposed to having to follow the presentation conventions of another platform, which might not allow certain style changes or code injection. They won‚Äôt suddenly have a high-level meeting design meeting where they decide to change the color schemes around on you or anything.‚úÖ More Secure than a self-hosted, interpreted blogYour typical blog (something like wordpress) has all of the blog content inside database objects, and then runs it through an interpreter (like PHP in this case) to render the site. This adds an extra layer of complexity in the ‚Äòserving up a webpage‚Äô process, and this is the most vulnerable part, because typically the process rendering the site needs access to lots of other sensitive systems (minimally a database). While it‚Äôs possible to set these sites up in a way where you effectively get a static site out of it (more on that later), you still usually have an administrative control center that is also easily accessible from the web. Securing all of the above and keeping it secure through migrations has a pretty large overhead, one that usually is beyond the scope of someone just trying to write something and put it up online.‚úÖ Nerdy satisfaction / IKEA effectThis process isn‚Äôt technology-blind ‚Äì you‚Äôre moving text files around and doing git commits to make it all work. Even if it‚Äôs not optimal, there‚Äôs a nerdy satisfaction to be had from it. You‚Äôve wired a bunch of things together to make something happen. That adds something extra for some folks (such as myself üôÇ)Cons‚õîÔ∏è Jekyll‚Äôs moderate complexityIt seems very straightforward‚Ä¶ you write a markdown file, run it through a templating engine, and you get a fully-rendered HTML page ready for publishing. You could even save the versions to Git so you can push it directly from a git repo.This was the core promise Jekyll was created to fulfill 2, coincidentally created by the cofounder of GitHub.It‚Äôs mainly for this reason that Jekyll is the engine that Github supports the most. By that, I mean there are tight integrations around it.This means, in theory, you can push a raw markdown file to your Jekyll repo, run an automated build process, have your site generated for you and updated immediately. In theory.In practice, there‚Äôs a little more tweaking involved. Minimally, you have to learn some of the basics of Ruby, Jekyll, and the GitHub build/actions system. There are some decent step-by-step tutorials out there, but I saw my set-up deviating in places enough that I had to do some investigating.Typically, this meant just googling things like ‚Äúhow to add a missing gem dependency‚Äù, but these little learning tasks add up. Not a lot, but it ends up being more than one would expect when ‚Äòjust‚Äô applying a template to a text file and ‚Äòjust‚Äô pushing that result, especially if Ruby and Git actions are new to you.‚õîÔ∏è The database lives in your headAs mentioned above, in a typical blogging solution, you have an admin interface with a WYSIWYG editor. That editor usually has convenient lists of meta-data fields built in, with format-checking and auto-completions where applicable. For instance, if you‚Äôre able to set a language on your post, the editor will usually have a ‚Äòlaguage‚Äô field with the languages you‚Äôve declared your blog to have elsewhere. If a ‚Äòdate‚Äô field is mandatory, the editor will make the ‚Äòdate‚Äô field light up red if you forget it.In one of these static-generated systems, the schema for these fields lives in your head. You have to remember which fields are mandatory, what options they can take, how you set them, etc. This isn‚Äôt a large set of fields, but can be cumbersome, especially with things like tags. You probably won‚Äôt remember if you‚Äôve tagged your posts with ‚Äúprogramming‚Äù or ‚Äúprogramming - c‚Äù or ‚Äúc programming‚Äù later without having a set of existing tags available to you. Here, you just have to remember these things.This goes for site-wide admin settings too. You have config files and you have to read lots of docs to know what settings they can take, like any other *nix utility.‚õîÔ∏è You kind of do have to use JekyllAs mentioned above the learning curve is mostly due to the fact that Jekyll and github actions seem specially designed to work together, but strictly speaking you don‚Äôt have to use Jekyll.In fact, you could just write raw HTML and post it, and it would appear, published and ready to go. Of course, writing pure HTML would be a pain to do constantly. It would probably be better to at least have a template for the parts that don‚Äôt change.This is about the level of functionality Pelican provides. It was actually quite appealing to me personally because it uses Python and Jinja, technologies that I‚Äôm already very familiar with. It also had a very minimal amount of meta-data and configuration associated with it. I ran it, and voil√†, a site ready to publish!Except, the default themes aren‚Äôt necessarily responsive. Sure, you want to put something out, but you want it to also look decent on mobile. And the default themes don‚Äôt necessarily integrate well with github‚Äôs build system without tweaks. And what if you want to put a diagram in?Unless you literally just want to give a URL to minimally stylized text, you kind of have to use Jekyll because:  it seems to have the best community support in terms of styling, typography, responsiveness and other ‚Äòmodern‚Äô design features that even the most casual readers will take for granted  its special relationship with github means it receives first-class support for new features that github rolls out (like giscus)  enough third-party extensions for common use-cases that you might not even realize you want until you start blogging (like diagrams)‚õîÔ∏è You‚Äôll need external tools for subscription-style featuresThere‚Äôs some platonic ideal world where a blogger can simply produce content and that content appears in front of the people who would enjoy it most. Unfortunately, this isn‚Äôt how content distribution works.A modern blogger has to put lots of thought into discoverability. This means SEO, managing subscribers, having publishing schedules to social media, among many other marketing-like activities.Most blogging platforms do have some amount of awareness of these factors baked in to them. Full-featured self-hosted solutions (like wordpress or ghost) have tools and ecosystems around collecting subscribers, publishing schedules, ways to optimize content etc. Blogging sites, such as Medium and Substack, also have large parts of their platform dedicated to building audiences and monetizing.A static site, by nature, will be limited on how much of these tools it can provide. If you want to get into blogging more ‚Äòseriously‚Äô, you will need to have external tools dedicated to managing the aboveIdeal user and use-caseSo, who should use github‚Äôs static blogging and when?Here‚Äôs a checklist:  You‚Äôre tech-savvy (can live in the command-line)  You enjoy writing markdown  You just have some information you would like to post online ‚Äúwithout fuss‚Äù  You have some external tooling and way of distributing your content OR you don‚Äôt care about distributing your content and you‚Äôre building this ‚Äòfor fun‚Äô  You don‚Äôt want to deal with maintaining serversBy the nature of these use-cases, this feature will most likely be used as an additional place to document technical information, probably where a person would like to give personal/editorial commentary that might not be appropriate in technical documentation. I think that‚Äôs what we‚Äôll see this space used for.Hope this was helpful!On a personal note, I‚Äôm going to experiment around with this for a while. I don‚Äôt know how much I‚Äôll post or maintain it, but I‚Äôm confident that any technical tidbits I want to share will stay up and remain maintained well into the future, so I‚Äôll put content here that fits that need.Notes:            Unless you use the built-in build process code¬†&#8617;              Blogging like a hacker (archive)¬†&#8617;      "
  }
  
]

