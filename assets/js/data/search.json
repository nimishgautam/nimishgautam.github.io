[
  
  {
    "title": "QMK Layer Issues and Troubleshooting",
    "url": "/posts/QMK-tricks/",
    "categories": "Programming",
    "tags": "QMK, Mechanical Keyboards, Programming",
    "date": "2022-09-11 00:00:00 +0200",
    





    "snippet": "OverviewQuantum Mechanical Keyboard (or qmk ) is an amazing software library that lets you program your mechanical keyboard in all sorts of ways.However, I’ve had some ‘minor’ issues in trying to get my keyboard to do exactly what I want, and it took lots of time combing through the documentation to figure out the solutions to my issues. So I made this ‘Layer Issues and Troubleshooting’ page to document some of my techniques and best-practices to solve some of these problems.Issue: Mod-tap or Layer-tap can’t send shifted characterLet’s say you have a dual-function key. On tap, it produces, say, the letter a. On hold, it temporarily applies a new layer. This works as expected with the LT() function. But, if you want it to send a modified character like ( (which is really 9 but with a shift modifier) it can’t do it. It only works on ‘simple’ codes.Solution: override the custom key handlingThere’s a great function called process_record_user that will handle a keypress in a customized way.In this case, you want to add to this function (or create it if it doesn’t exist) in your keymap.c file.If you wanted a key to produce ( on tap and toggle layer 1 on hold, you would call it LT(1, KC_LPRN) and have a function like this:bool process_record_user(uint16_t keycode, keyrecord_t *record) {  switch (keycode) {    case LT(1,KC_LPRN):        if (record-&gt;tap.count &amp;&amp; record-&gt;event.pressed) { //normally the tap sends nothing, you intercept it here            tap_code16(KC_LPRN);             return false; // stop handling this event        }    break;This means that on tap, this function taps KC_LPRN and then stops processing the key press.Issue: Mod-tap can’t switch to a layer while applying a modifier to that layerLet’s say you have a numbers layer, and rather than creating a symbols layer, you just want to press a button that layer-taps you into the numbers but with ‘shift’ held down at the same time.There’s no default way to do this in QMK. You can switch to a new layer, but you can’t switch to the layer with a modifier held down simultaniously.Solution: add the mod to the key handlerThis looks similar to the solution above, and you will put this in the same switch statement as above.The critical difference is returning true instead of false so the key press gets processed further.In this case, say you wanted a key to temporarily toggle Layer 1 with the left shift modifier pressed on hold, and produce a comma (,) when tapped:   case LT(1, KC_COMM):        if(record-&gt;event.pressed){ //pressed down            if(!record-&gt;tap.count){ //hasn't had a tap yet, so just being held down                register_mods(MOD_LSFT);                }        }        else{            unregister_mods(MOD_LSFT); // key up        }        return true; // keep processing key!        break;Now, holding this key down and another key will cause the second key to output its shifted version in layer 1.Issue: You want a fully customized behavior on tap and hold of a particular keySay you want a key to copy on tap and paste on hold.Solution: it’s in the docs 🙂This solution is actually in the documentation. 🙂So why bring it up? With the popularity of the Oryx configurator many people will try to use the advanced tap-dance configurations to produce this behavior instead. While it’s not wrong and will probably work, I’ve found it to be a little difficult to trigger reliably. In general, I’ve found using mod-tap works best and the ‘advanced’ tap dance configurations should only be used when you need to do something truly advanced.Issue: auto-shift doesn’t shift ‘complex’ key codesAuto-shift lets you (as the name implies) auto-shift keys. So, if you quickly tap ‘s’, you’ll get ‘s’. Hold it down a bit longer and you get ‘S’. It’s nifty and works fine if your key is sending KC_S but if your key is actually something like MT(MOD_LALT, KC_S), then it won’t work and you might bang your head on the table endlessly figuring out why.Solution: define custom autoshift behaviorThis is in the docs, but not totally clear or obvious (as of this writing)First, you have to understand the idea of ‘retro tapping’.The idea behind this is that if you did have a key like MT(MOD_LALT, KC_S) above, it won’t ever send a ‘s’ if you hold it down past the tapping term. It’ll send a ‘s’ on quick tap and act like you’re holding down the Alt key otherwise. If you want to hold it down and get a ‘s’, you have to enable ‘retro tap’.In terms of autoshift, basically what you want to happen is that if you hold this key down for some quick amount of time, you get a ‘s’, some other amount of time and you get a ‘S’, and a different amount of time and it assumes you’re pressing ‘alt’. There’s some fine-tuning on the timings to get it right, but in terms of auto-shift world, this behavior makes this key a ‘retro’ key because it requires ‘retro tapping’ to work.The simplest way to get it running is to:      define a RETRO_SHIFT term in your config.h file. Contrary to intuition, this is actually the timeout, after which the given ‘retro’ keys will only produce their hold values, so it’s a good idea to set it kind of high (like 400)        Create a function like below:  bool get_custom_auto_shifted_key(uint16_t keycode, keyrecord_t *record) {    if (IS_RETRO(keycode)){return true;}    else {      return false;    }}This function will actually allow you to set whether autoshift behavior is defined on a per-key basis. The ‘retro’ keys are outside the standard autoshift ranges, so, again, you will need this if you’re not sending a simple key code."
  },
  
  {
    "title": "GitHub-hosted Static Pages - is it worth it?",
    "url": "/posts/Github-hosted/",
    "categories": "Blogging",
    "tags": "web development, blogging, software philosophy",
    "date": "2022-09-11 00:00:00 +0200",
    





    "snippet": "Motivation for a github.io pageGithub has a fairly strong positive reputation (as of this writing 🙂)They also have a feature where they will host a static website for you for free based on the contents of a github repository. By convention, most people use this as a personal blog space, and specifically technical blogs (I think this is a self-selecting mechanism I’ll talk about later). So, using this system, you can have your own site associated with your github account. Nifty.Throughout the years, I’ve had accounts on dozens of blogging platforms, along with setting up my own self-hosted blogs.I’ve never gone with static blog generation in the way that github recommends though, so I thought I’d give it a whirl.Here are some of the pros and cons I found in that process.Pros✅ FreeNo hosting costs or subscription costs, big plus. But this extends beyond simple hosting costs and also covers maintenance costs. You don’t have to update the underlying server, ensure it’s secure, do any migrations1 or anything. Theoretically, your content will be fine, secure, and accessible for as long as github offers this service. As someone who has unfortunately left Wordpress installations idle for years, I can say this point shouldn’t be overlooked.✅ Full Content controlYou control the code that’s deployed in its final form; the platform doesn’t add advertising banners without you knowing or otherwise break up or reflow your content in ways you didn’t anticipate.✅ Full presentation controlSimilarly, since the site has been auto-generated already, you can edit the generated HTML files after-the-fact and modify/inject whatever you want, as opposed to having to follow the presentation conventions of another platform, which might not allow certain style changes or code injection. They won’t suddenly have a high-level meeting design meeting where they decide to change the color schemes around on you or anything.✅ More Secure than a self-hosted, interpreted blogYour typical blog (something like wordpress) has all of the blog content inside database objects, and then runs it through an interpreter (like PHP in this case) to render the site. This adds an extra layer of complexity in the ‘serving up a webpage’ process, and this is the most vulnerable part, because typically the process rendering the site needs access to lots of other sensitive systems (minimally a database). While it’s possible to set these sites up in a way where you effectively get a static site out of it (more on that later), you still usually have an administrative control center that is also easily accessible from the web. Securing all of the above and keeping it secure through migrations has a pretty large overhead, one that usually is beyond the scope of someone just trying to write something and put it up online.✅ Nerdy satisfaction / IKEA effectThis process isn’t technology-blind – you’re moving text files around and doing git commits to make it all work. Even if it’s not optimal, there’s a nerdy satisfaction to be had from it. You’ve wired a bunch of things together to make something happen. That adds something extra for some folks (such as myself 🙂)Cons⛔️ Jekyll’s moderate complexityIt seems very straightforward… you write a markdown file, run it through a templating engine, and you get a fully-rendered HTML page ready for publishing. You could even save the versions to Git so you can push it directly from a git repo.This was the core promise Jekyll was created to fulfill 2, coincidentally created by the cofounder of GitHub.It’s mainly for this reason that Jekyll is the engine that Github supports the most. By that, I mean there are tight integrations around it.This means, in theory, you can push a raw markdown file to your Jekyll repo, run an automated build process, have your site generated for you and updated immediately. In theory.In practice, there’s a little more tweaking involved. Minimally, you have to learn some of the basics of Ruby, Jekyll, and the GitHub build/actions system. There are some decent step-by-step tutorials out there, but I saw my set-up deviating in places enough that I had to do some investigating.Typically, this meant just googling things like “how to add a missing gem dependency”, but these little learning tasks add up. Not a lot, but it ends up being more than one would expect when ‘just’ applying a template to a text file and ‘just’ pushing that result, especially if Ruby and Git actions are new to you.⛔️ The database lives in your headAs mentioned above, in a typical blogging solution, you have an admin interface with a WYSIWYG editor. That editor usually has convenient lists of meta-data fields built in, with format-checking and auto-completions where applicable. For instance, if you’re able to set a language on your post, the editor will usually have a ‘laguage’ field with the languages you’ve declared your blog to have elsewhere. If a ‘date’ field is mandatory, the editor will make the ‘date’ field light up red if you forget it.In one of these static-generated systems, the schema for these fields lives in your head. You have to remember which fields are mandatory, what options they can take, how you set them, etc. This isn’t a large set of fields, but can be cumbersome, especially with things like tags. You probably won’t remember if you’ve tagged your posts with “programming” or “programming - c” or “c programming” later without having a set of existing tags available to you. Here, you just have to remember these things.This goes for site-wide admin settings too. You have config files and you have to read lots of docs to know what settings they can take, like any other *nix utility.⛔️ You kind of do have to use JekyllAs mentioned above the learning curve is mostly due to the fact that Jekyll and github actions seem specially designed to work together, but strictly speaking you don’t have to use Jekyll.In fact, you could just write raw HTML and post it, and it would appear, published and ready to go. Of course, writing pure HTML would be a pain to do constantly. It would probably be better to at least have a template for the parts that don’t change.This is about the level of functionality Pelican provides. It was actually quite appealing to me personally because it uses Python and Jinja, technologies that I’m already very familiar with. It also had a very minimal amount of meta-data and configuration associated with it. I ran it, and voilà, a site ready to publish!Except, the default themes aren’t necessarily responsive. Sure, you want to put something out, but you want it to also look decent on mobile. And the default themes don’t necessarily integrate well with github’s build system without tweaks. And what if you want to put a diagram in?Unless you literally just want to give a URL to minimally stylized text, you kind of have to use Jekyll because:  it seems to have the best community support in terms of styling, typography, responsiveness and other ‘modern’ design features that even the most casual readers will take for granted  its special relationship with github means it receives first-class support for new features that github rolls out (like giscus)  enough third-party extensions for common use-cases that you might not even realize you want until you start blogging (like diagrams)⛔️ You’ll need external tools for subscription-style featuresThere’s some platonic ideal world where a blogger can simply produce content and that content appears in front of the people who would enjoy it most. Unfortunately, this isn’t how content distribution works.A modern blogger has to put lots of thought into discoverability. This means SEO, managing subscribers, having publishing schedules to social media, among many other marketing-like activities.Most blogging platforms do have some amount of awareness of these factors baked in to them. Full-featured self-hosted solutions (like wordpress or ghost) have tools and ecosystems around collecting subscribers, publishing schedules, ways to optimize content etc. Blogging sites, such as Medium and Substack, also have large parts of their platform dedicated to building audiences and monetizing.A static site, by nature, will be limited on how much of these tools it can provide. If you want to get into blogging more ‘seriously’, you will need to have external tools dedicated to managing the aboveIdeal user and use-caseSo, who should use github’s static blogging and when?Here’s a checklist:  You’re tech-savvy (can live in the command-line)  You enjoy writing markdown  You just have some information you would like to post online “without fuss”  You have some external tooling and way of distributing your content OR you don’t care about distributing your content and you’re building this ‘for fun’  You don’t want to deal with maintaining serversBy the nature of these use-cases, this feature will most likely be used as an additional place to document technical information, probably where a person would like to give personal/editorial commentary that might not be appropriate in technical documentation. I think that’s what we’ll see this space used for.Hope this was helpful!On a personal note, I’m going to experiment around with this for a while. I don’t know how much I’ll post or maintain it, but I’m confident that any technical tidbits I want to share will stay up and remain maintained well into the future, so I’ll put content here that fits that need.Notes:            Unless you use the built-in build process code &#8617;              Blogging like a hacker (archive) &#8617;      "
  }
  
]

